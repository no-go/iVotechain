/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RegOffice_H
#define RegOffice_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "SimpleEvote_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RegOfficeIf {
 public:
  virtual ~RegOfficeIf() {}
  virtual void sign(std::string& _return, const Ident& ident, const std::string& blindedHashedPsydonyme) = 0;
};

class RegOfficeIfFactory {
 public:
  typedef RegOfficeIf Handler;

  virtual ~RegOfficeIfFactory() {}

  virtual RegOfficeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RegOfficeIf* /* handler */) = 0;
};

class RegOfficeIfSingletonFactory : virtual public RegOfficeIfFactory {
 public:
  RegOfficeIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<RegOfficeIf>& iface) : iface_(iface) {}
  virtual ~RegOfficeIfSingletonFactory() {}

  virtual RegOfficeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RegOfficeIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<RegOfficeIf> iface_;
};

class RegOfficeNull : virtual public RegOfficeIf {
 public:
  virtual ~RegOfficeNull() {}
  void sign(std::string& /* _return */, const Ident& /* ident */, const std::string& /* blindedHashedPsydonyme */) {
    return;
  }
};

typedef struct _RegOffice_sign_args__isset {
  _RegOffice_sign_args__isset() : ident(false), blindedHashedPsydonyme(false) {}
  bool ident :1;
  bool blindedHashedPsydonyme :1;
} _RegOffice_sign_args__isset;

class RegOffice_sign_args {
 public:

  RegOffice_sign_args(const RegOffice_sign_args&);
  RegOffice_sign_args& operator=(const RegOffice_sign_args&);
  RegOffice_sign_args() : blindedHashedPsydonyme() {
  }

  virtual ~RegOffice_sign_args() throw();
  Ident ident;
  std::string blindedHashedPsydonyme;

  _RegOffice_sign_args__isset __isset;

  void __set_ident(const Ident& val);

  void __set_blindedHashedPsydonyme(const std::string& val);

  bool operator == (const RegOffice_sign_args & rhs) const
  {
    if (!(ident == rhs.ident))
      return false;
    if (!(blindedHashedPsydonyme == rhs.blindedHashedPsydonyme))
      return false;
    return true;
  }
  bool operator != (const RegOffice_sign_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegOffice_sign_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RegOffice_sign_pargs {
 public:


  virtual ~RegOffice_sign_pargs() throw();
  const Ident* ident;
  const std::string* blindedHashedPsydonyme;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RegOffice_sign_result__isset {
  _RegOffice_sign_result__isset() : success(false) {}
  bool success :1;
} _RegOffice_sign_result__isset;

class RegOffice_sign_result {
 public:

  RegOffice_sign_result(const RegOffice_sign_result&);
  RegOffice_sign_result& operator=(const RegOffice_sign_result&);
  RegOffice_sign_result() : success() {
  }

  virtual ~RegOffice_sign_result() throw();
  std::string success;

  _RegOffice_sign_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const RegOffice_sign_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RegOffice_sign_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegOffice_sign_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RegOffice_sign_presult__isset {
  _RegOffice_sign_presult__isset() : success(false) {}
  bool success :1;
} _RegOffice_sign_presult__isset;

class RegOffice_sign_presult {
 public:


  virtual ~RegOffice_sign_presult() throw();
  std::string* success;

  _RegOffice_sign_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RegOfficeClient : virtual public RegOfficeIf {
 public:
  RegOfficeClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RegOfficeClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sign(std::string& _return, const Ident& ident, const std::string& blindedHashedPsydonyme);
  void send_sign(const Ident& ident, const std::string& blindedHashedPsydonyme);
  void recv_sign(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RegOfficeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<RegOfficeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RegOfficeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sign(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RegOfficeProcessor(::apache::thrift::stdcxx::shared_ptr<RegOfficeIf> iface) :
    iface_(iface) {
    processMap_["sign"] = &RegOfficeProcessor::process_sign;
  }

  virtual ~RegOfficeProcessor() {}
};

class RegOfficeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RegOfficeProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< RegOfficeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< RegOfficeIfFactory > handlerFactory_;
};

class RegOfficeMultiface : virtual public RegOfficeIf {
 public:
  RegOfficeMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<RegOfficeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RegOfficeMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<RegOfficeIf> > ifaces_;
  RegOfficeMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<RegOfficeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sign(std::string& _return, const Ident& ident, const std::string& blindedHashedPsydonyme) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sign(_return, ident, blindedHashedPsydonyme);
    }
    ifaces_[i]->sign(_return, ident, blindedHashedPsydonyme);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RegOfficeConcurrentClient : virtual public RegOfficeIf {
 public:
  RegOfficeConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RegOfficeConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sign(std::string& _return, const Ident& ident, const std::string& blindedHashedPsydonyme);
  int32_t send_sign(const Ident& ident, const std::string& blindedHashedPsydonyme);
  void recv_sign(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif

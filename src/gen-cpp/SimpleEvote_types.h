/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimpleEvote_TYPES_H
#define SimpleEvote_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class Ident;

typedef struct _Ident__isset {
  _Ident__isset() : id(false), name(false), used(true) {}
  bool id :1;
  bool name :1;
  bool used :1;
} _Ident__isset;

class Ident : public virtual ::apache::thrift::TBase {
 public:

  Ident(const Ident&);
  Ident& operator=(const Ident&);
  Ident() : id(0), name(), used(false) {
  }

  virtual ~Ident() throw();
  int32_t id;
  std::string name;
  bool used;

  _Ident__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_used(const bool val);

  bool operator == (const Ident & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(used == rhs.used))
      return false;
    return true;
  }
  bool operator != (const Ident &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ident & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Ident &a, Ident &b);

std::ostream& operator<<(std::ostream& out, const Ident& obj);



#endif
